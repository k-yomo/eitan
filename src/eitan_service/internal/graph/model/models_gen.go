// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Node interface {
	IsNode()
}

type Quiz interface {
	IsQuiz()
}

type QuizAnswer interface {
	IsQuizAnswer()
}

type CurrentUserProfile struct {
	ID           string  `json:"id"`
	Email        string  `json:"email"`
	DisplayName  string  `json:"displayName"`
	ScreenImgURL *string `json:"screenImgUrl"`
}

type FourChoicesQuiz struct {
	ID       string        `json:"id"`
	QuizType QuizType      `json:"quizType"`
	Question string        `json:"question"`
	Choices  []*QuizChoice `json:"choices"`
}

func (FourChoicesQuiz) IsQuiz() {}

type FourChoicesQuizAnswer struct {
	Quiz             Quiz   `json:"quiz"`
	AnsweredPlayerID string `json:"answeredPlayerID"`
	CorrectChoiceID  string `json:"correctChoiceID"`
}

func (FourChoicesQuizAnswer) IsQuizAnswer() {}

type Player struct {
	ID          string       `json:"id"`
	UserID      string       `json:"userId"`
	UserProfile *UserProfile `json:"userProfile"`
}

func (Player) IsNode() {}

type QuizChoice struct {
	ID     string `json:"id"`
	Choice string `json:"choice"`
}

func (QuizChoice) IsNode() {}

type QuizRoom struct {
	ID      string    `json:"id"`
	Players []*Player `json:"players"`
}

func (QuizRoom) IsNode() {}

type UpdatePlayerIDInput struct {
	PlayerID string `json:"playerId"`
}

type UserProfile struct {
	ID           string  `json:"id"`
	DisplayName  string  `json:"displayName"`
	ScreenImgURL *string `json:"screenImgUrl"`
}

func (UserProfile) IsNode() {}

type ErrorCode string

const (
	ErrorCodeUnauthenticated ErrorCode = "UNAUTHENTICATED"
	ErrorCodeUnauthorized    ErrorCode = "UNAUTHORIZED"
	ErrorCodeAlreadyExist    ErrorCode = "ALREADY_EXIST"
	ErrorCodeInvalidArgument ErrorCode = "INVALID_ARGUMENT"
	ErrorCodeNotFound        ErrorCode = "NOT_FOUND"
	ErrorCodeInternal        ErrorCode = "INTERNAL"
)

var AllErrorCode = []ErrorCode{
	ErrorCodeUnauthenticated,
	ErrorCodeUnauthorized,
	ErrorCodeAlreadyExist,
	ErrorCodeInvalidArgument,
	ErrorCodeNotFound,
	ErrorCodeInternal,
}

func (e ErrorCode) IsValid() bool {
	switch e {
	case ErrorCodeUnauthenticated, ErrorCodeUnauthorized, ErrorCodeAlreadyExist, ErrorCodeInvalidArgument, ErrorCodeNotFound, ErrorCodeInternal:
		return true
	}
	return false
}

func (e ErrorCode) String() string {
	return string(e)
}

func (e *ErrorCode) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ErrorCode(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ErrorCode", str)
	}
	return nil
}

func (e ErrorCode) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type QuizType string

const (
	QuizTypeFourChoices QuizType = "FourChoices"
)

var AllQuizType = []QuizType{
	QuizTypeFourChoices,
}

func (e QuizType) IsValid() bool {
	switch e {
	case QuizTypeFourChoices:
		return true
	}
	return false
}

func (e QuizType) String() string {
	return string(e)
}

func (e *QuizType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = QuizType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid QuizType", str)
	}
	return nil
}

func (e QuizType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleUser Role = "USER"
)

var AllRole = []Role{
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
