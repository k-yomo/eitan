// Package infra contains the types for schema 'eitandb'.
package infra

// GENERATED BY XO. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"time"

	"github.com/jmoiron/sqlx"
	"github.com/k-yomo/eitan/src/pkg/tx"
)

// MatchWaitingPlayer represents a row from 'match_waiting_players'.
type MatchWaitingPlayer struct {
	PlayerID  string    `db:"player_id"`  // player_id
	CreatedAt time.Time `db:"created_at"` // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the MatchWaitingPlayer exists in the database.
func (mwp *MatchWaitingPlayer) Exists() bool {
	return mwp._exists
}

// GetAllMatchWaitingPlayers gets all MatchWaitingPlayers
func GetAllMatchWaitingPlayers(ctx context.Context, db Queryer) ([]*MatchWaitingPlayer, error) {
	// sql query
	const sqlstr = `SELECT ` +
		`player_id, created_at ` +
		`FROM match_waiting_players`

	// log and trace
	XOLog(ctx, sqlstr)
	closeSpan := startSQLSpan(ctx, "GetAllMatchWaitingPlayers", sqlstr)
	defer closeSpan()

	var mwps []*MatchWaitingPlayer
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, err
	}

	for rows.Next() {
		mwp := MatchWaitingPlayer{_exists: true}
		if err := rows.Scan(&mwp.PlayerID, &mwp.CreatedAt); err != nil {
			return nil, err
		}
		mwps = append(mwps, &mwp)
	}
	return mwps, nil
}

// GetMatchWaitingPlayer gets a MatchWaitingPlayer by primary key
func GetMatchWaitingPlayer(ctx context.Context, db Queryer, key string) (*MatchWaitingPlayer, error) {
	// sql query
	const sqlstr = `SELECT ` +
		`player_id, created_at ` +
		`FROM match_waiting_players ` +
		`WHERE player_id = ?`

	// log and trace
	XOLog(ctx, sqlstr, key)
	closeSpan := startSQLSpan(ctx, "GetMatchWaitingPlayer", sqlstr, key)
	defer closeSpan()

	mwp := MatchWaitingPlayer{_exists: true}
	err := db.QueryRowxContext(ctx, sqlstr, key).Scan(&mwp.PlayerID, &mwp.CreatedAt)
	if err != nil {
		return nil, err
	}
	return &mwp, nil
}

// GetMatchWaitingPlayers gets MatchWaitingPlayer list by primary keys
func GetMatchWaitingPlayers(ctx context.Context, db Queryer, keys []string) ([]*MatchWaitingPlayer, error) {
	// sql query
	sqlstr, args, err := sqlx.In(`SELECT `+
		`player_id, created_at `+
		`FROM match_waiting_players `+
		`WHERE player_id IN (?)`, keys)
	if err != nil {
		return nil, err
	}

	// log and trace
	XOLog(ctx, sqlstr, args)
	closeSpan := startSQLSpan(ctx, "GetMatchWaitingPlayers", sqlstr, args)
	defer closeSpan()

	rows, err := db.QueryContext(ctx, sqlstr, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// load results
	var res []*MatchWaitingPlayer
	for rows.Next() {
		mwp := MatchWaitingPlayer{
			_exists: true,
		}

		// scan
		err = rows.Scan(&mwp.PlayerID, &mwp.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &mwp)
	}

	return res, nil
}

func QueryMatchWaitingPlayer(ctx context.Context, q sqlx.QueryerContext, sqlstr string, args ...interface{}) (*MatchWaitingPlayer, error) {
	// log and trace
	XOLog(ctx, sqlstr, args)
	closeSpan := startSQLSpan(ctx, "QueryMatchWaitingPlayer", sqlstr, args)
	defer closeSpan()

	var dest MatchWaitingPlayer
	err := sqlx.GetContext(ctx, q, &dest, sqlstr, args...)
	return &dest, err
}

func QueryMatchWaitingPlayers(ctx context.Context, q sqlx.QueryerContext, sqlstr string, args ...interface{}) ([]*MatchWaitingPlayer, error) {
	// log and trace
	XOLog(ctx, sqlstr, args)
	closeSpan := startSQLSpan(ctx, "QueryMatchWaitingPlayers", sqlstr, args)
	defer closeSpan()

	var dest []*MatchWaitingPlayer
	err := sqlx.SelectContext(ctx, q, &dest, sqlstr, args...)
	return dest, err
}

// Deleted provides information if the MatchWaitingPlayer has been deleted from the database.
func (mwp *MatchWaitingPlayer) Deleted() bool {
	return mwp._deleted
}

// Insert inserts the MatchWaitingPlayer to the database.
func (mwp *MatchWaitingPlayer) Insert(ctx context.Context, db Execer) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	// if already exist, bail
	if mwp._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO match_waiting_players (` +
		`player_id, created_at` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// log and trace
	XOLog(ctx, sqlstr, mwp.PlayerID, mwp.CreatedAt)
	closeSpan := startSQLSpan(ctx, "MatchWaitingPlayer_Insert", sqlstr, mwp.PlayerID, mwp.CreatedAt)
	defer closeSpan()

	// run query
	_, err := db.ExecContext(ctx, sqlstr, mwp.PlayerID, mwp.CreatedAt)
	if err != nil {
		return err
	}

	// set existence
	mwp._exists = true

	return nil
}

// Update updates the MatchWaitingPlayer in the database.
func (mwp *MatchWaitingPlayer) Update(ctx context.Context, db Execer) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	// if doesn't exist, bail
	if !mwp._exists {
		return errors.New("update failed: does not exist")
	}
	// if deleted, bail
	if mwp._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE match_waiting_players SET ` +
		`created_at = ?` +
		` WHERE player_id = ?`

	// log and trace
	XOLog(ctx, sqlstr, mwp.CreatedAt, mwp.PlayerID)
	closeSpan := startSQLSpan(ctx, "MatchWaitingPlayer_Update", sqlstr, mwp.CreatedAt, mwp.PlayerID)
	defer closeSpan()

	// run query
	_, err := db.ExecContext(ctx, sqlstr, mwp.CreatedAt, mwp.PlayerID)
	return err
}

// Delete deletes the MatchWaitingPlayer from the database.
func (mwp *MatchWaitingPlayer) Delete(ctx context.Context, db Execer) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	// if doesn't exist, bail
	if !mwp._exists {
		return nil
	}

	// if deleted, bail
	if mwp._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM match_waiting_players WHERE player_id = ?`

	// log and trace
	XOLog(ctx, sqlstr, mwp.PlayerID)
	closeSpan := startSQLSpan(ctx, "{ .Name }}_Delete", sqlstr, mwp.PlayerID)
	defer closeSpan()

	// run query
	_, err := db.ExecContext(ctx, sqlstr, mwp.PlayerID)
	if err != nil {
		return err
	}

	// set deleted
	mwp._deleted = true

	return nil
}

// InsertOrUpdate inserts or updates the MatchWaitingPlayer to the database.
func (mwp *MatchWaitingPlayer) InsertOrUpdate(ctx context.Context, db Executor) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	_, err := GetMatchWaitingPlayer(ctx, db, mwp.PlayerID)
	if err != nil && err != sql.ErrNoRows {
		return err
	}
	if err == sql.ErrNoRows {
		return mwp.Insert(ctx, db)
	} else {
		mwp._exists = true
		return mwp.Update(ctx, db)
	}
}

// InsertOrUpdate inserts or updates the MatchWaitingPlayer to the database.
func (mwp *MatchWaitingPlayer) InsertIfNotExist(ctx context.Context, db Executor) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	_, err := GetMatchWaitingPlayer(ctx, db, mwp.PlayerID)
	if err != nil {
		if err == sql.ErrNoRows {
			return mwp.Insert(ctx, db)
		}
		return err
	}

	return nil
}

// Player returns the Player associated with the MatchWaitingPlayer's PlayerID (player_id).
//
// Generated from foreign key 'match_waiting_players_ibfk_1'.
func (mwp *MatchWaitingPlayer) Player(ctx context.Context, db Executor) (*Player, error) {
	return GetPlayerByID(ctx, db, mwp.PlayerID)
}

// GetMatchWaitingPlayerByPlayerID retrieves a row from 'match_waiting_players' as a MatchWaitingPlayer.
// Generated from index 'match_waiting_players_player_id_pkey'.
func GetMatchWaitingPlayerByPlayerID(ctx context.Context, db Queryer, playerID string) (*MatchWaitingPlayer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`player_id, created_at ` +
		`FROM match_waiting_players ` +
		`WHERE player_id = ?`

	// log and trace
	XOLog(ctx, sqlstr, playerID)
	closeSpan := startSQLSpan(ctx, "MatchWaitingPlayerByPlayerID", sqlstr, playerID)
	defer closeSpan()
	mwp := MatchWaitingPlayer{
		_exists: true,
	}

	// run query
	err = db.QueryRowxContext(ctx, sqlstr, playerID).Scan(&mwp.PlayerID, &mwp.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &mwp, nil
}
