// Package infra contains the types for schema 'accountdb'.
package infra

// GENERATED BY XO. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"time"

	"github.com/jmoiron/sqlx"
	"github.com/k-yomo/eitan/src/pkg/tx"
)

// GoogleAuth represents a row from 'google_auth'.
type GoogleAuth struct {
	UserID    string    `db:"user_id"`    // user_id
	GoogleID  string    `db:"google_id"`  // google_id
	CreatedAt time.Time `db:"created_at"` // created_at
	UpdatedAt time.Time `db:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the GoogleAuth exists in the database.
func (ga *GoogleAuth) Exists() bool {
	return ga._exists
}

// GetAllGoogleAuths gets all GoogleAuths
func GetAllGoogleAuths(ctx context.Context, db Queryer) ([]*GoogleAuth, error) {
	// sql query
	const sqlstr = `SELECT ` +
		`user_id, google_id, created_at, updated_at ` +
		`FROM google_auth`

	// log and trace
	XOLog(ctx, sqlstr)
	closeSpan := startSQLSpan(ctx, "GetAllGoogleAuths", sqlstr)
	defer closeSpan()

	var gas []*GoogleAuth
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, err
	}

	for rows.Next() {
		ga := GoogleAuth{_exists: true}
		if err := rows.Scan(&ga.UserID, &ga.GoogleID, &ga.CreatedAt, &ga.UpdatedAt); err != nil {
			return nil, err
		}
		gas = append(gas, &ga)
	}
	return gas, nil
}

// GetGoogleAuth gets a GoogleAuth by primary key
func GetGoogleAuth(ctx context.Context, db Queryer, key string) (*GoogleAuth, error) {
	// sql query
	const sqlstr = `SELECT ` +
		`user_id, google_id, created_at, updated_at ` +
		`FROM google_auth ` +
		`WHERE user_id = ?`

	// log and trace
	XOLog(ctx, sqlstr, key)
	closeSpan := startSQLSpan(ctx, "GetGoogleAuth", sqlstr, key)
	defer closeSpan()

	ga := GoogleAuth{_exists: true}
	err := db.QueryRowxContext(ctx, sqlstr, key).Scan(&ga.UserID, &ga.GoogleID, &ga.CreatedAt, &ga.UpdatedAt)
	if err != nil {
		return nil, err
	}
	return &ga, nil
}

// GetGoogleAuths gets GoogleAuth list by primary keys
func GetGoogleAuths(ctx context.Context, db Queryer, keys []string) ([]*GoogleAuth, error) {
	// sql query
	sqlstr, args, err := sqlx.In(`SELECT `+
		`user_id, google_id, created_at, updated_at `+
		`FROM google_auth `+
		`WHERE user_id IN (?)`, keys)
	if err != nil {
		return nil, err
	}

	// log and trace
	XOLog(ctx, sqlstr, args)
	closeSpan := startSQLSpan(ctx, "GetGoogleAuths", sqlstr, args)
	defer closeSpan()

	rows, err := db.QueryContext(ctx, sqlstr, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// load results
	var res []*GoogleAuth
	for rows.Next() {
		ga := GoogleAuth{
			_exists: true,
		}

		// scan
		err = rows.Scan(&ga.UserID, &ga.GoogleID, &ga.CreatedAt, &ga.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &ga)
	}

	return res, nil
}

func QueryGoogleAuth(ctx context.Context, q sqlx.QueryerContext, sqlstr string, args ...interface{}) (*GoogleAuth, error) {
	// log and trace
	XOLog(ctx, sqlstr, args)
	closeSpan := startSQLSpan(ctx, "QueryGoogleAuth", sqlstr, args)
	defer closeSpan()

	var dest GoogleAuth
	err := sqlx.GetContext(ctx, q, &dest, sqlstr, args...)
	return &dest, err
}

func QueryGoogleAuths(ctx context.Context, q sqlx.QueryerContext, sqlstr string, args ...interface{}) ([]*GoogleAuth, error) {
	// log and trace
	XOLog(ctx, sqlstr, args)
	closeSpan := startSQLSpan(ctx, "QueryGoogleAuths", sqlstr, args)
	defer closeSpan()

	var dest []*GoogleAuth
	err := sqlx.SelectContext(ctx, q, &dest, sqlstr, args...)
	return dest, err
}

// Deleted provides information if the GoogleAuth has been deleted from the database.
func (ga *GoogleAuth) Deleted() bool {
	return ga._deleted
}

// Insert inserts the GoogleAuth to the database.
func (ga *GoogleAuth) Insert(ctx context.Context, db Execer) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	// if already exist, bail
	if ga._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO google_auth (` +
		`user_id, google_id, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// log and trace
	XOLog(ctx, sqlstr, ga.UserID, ga.GoogleID, ga.CreatedAt, ga.UpdatedAt)
	closeSpan := startSQLSpan(ctx, "GoogleAuth_Insert", sqlstr, ga.UserID, ga.GoogleID, ga.CreatedAt, ga.UpdatedAt)
	defer closeSpan()

	// run query
	_, err := db.ExecContext(ctx, sqlstr, ga.UserID, ga.GoogleID, ga.CreatedAt, ga.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	ga._exists = true

	return nil
}

// Update updates the GoogleAuth in the database.
func (ga *GoogleAuth) Update(ctx context.Context, db Execer) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	// if doesn't exist, bail
	if !ga._exists {
		return errors.New("update failed: does not exist")
	}
	// if deleted, bail
	if ga._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE google_auth SET ` +
		`google_id = ?, created_at = ?, updated_at = ?` +
		` WHERE user_id = ?`

	// log and trace
	XOLog(ctx, sqlstr, ga.GoogleID, ga.CreatedAt, ga.UpdatedAt, ga.UserID)
	closeSpan := startSQLSpan(ctx, "GoogleAuth_Update", sqlstr, ga.GoogleID, ga.CreatedAt, ga.UpdatedAt, ga.UserID)
	defer closeSpan()

	// run query
	_, err := db.ExecContext(ctx, sqlstr, ga.GoogleID, ga.CreatedAt, ga.UpdatedAt, ga.UserID)
	return err
}

// Delete deletes the GoogleAuth from the database.
func (ga *GoogleAuth) Delete(ctx context.Context, db Execer) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	// if doesn't exist, bail
	if !ga._exists {
		return nil
	}

	// if deleted, bail
	if ga._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM google_auth WHERE user_id = ?`

	// log and trace
	XOLog(ctx, sqlstr, ga.UserID)
	closeSpan := startSQLSpan(ctx, "{ .Name }}_Delete", sqlstr, ga.UserID)
	defer closeSpan()

	// run query
	_, err := db.ExecContext(ctx, sqlstr, ga.UserID)
	if err != nil {
		return err
	}

	// set deleted
	ga._deleted = true

	return nil
}

// InsertOrUpdate inserts or updates the GoogleAuth to the database.
func (ga *GoogleAuth) InsertOrUpdate(ctx context.Context, db Executor) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	_, err := GetGoogleAuth(ctx, db, ga.UserID)
	if err != nil && err != sql.ErrNoRows {
		return err
	}
	if err == sql.ErrNoRows {
		return ga.Insert(ctx, db)
	} else {
		ga._exists = true
		return ga.Update(ctx, db)
	}
}

// InsertOrUpdate inserts or updates the GoogleAuth to the database.
func (ga *GoogleAuth) InsertIfNotExist(ctx context.Context, db Executor) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	_, err := GetGoogleAuth(ctx, db, ga.UserID)
	if err != nil {
		if err == sql.ErrNoRows {
			return ga.Insert(ctx, db)
		}
		return err
	}

	return nil
}

// User returns the User associated with the GoogleAuth's UserID (user_id).
//
// Generated from foreign key 'google_auth_ibfk_1'.
func (ga *GoogleAuth) User(ctx context.Context, db Executor) (*User, error) {
	return GetUserByID(ctx, db, ga.UserID)
}

// GetGoogleAuthByUserID retrieves a row from 'google_auth' as a GoogleAuth.
// Generated from index 'google_auth_user_id_pkey'.
func GetGoogleAuthByUserID(ctx context.Context, db Queryer, userID string) (*GoogleAuth, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, google_id, created_at, updated_at ` +
		`FROM google_auth ` +
		`WHERE user_id = ?`

	// log and trace
	XOLog(ctx, sqlstr, userID)
	closeSpan := startSQLSpan(ctx, "GoogleAuthByUserID", sqlstr, userID)
	defer closeSpan()
	ga := GoogleAuth{
		_exists: true,
	}

	// run query
	err = db.QueryRowxContext(ctx, sqlstr, userID).Scan(&ga.UserID, &ga.GoogleID, &ga.CreatedAt, &ga.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &ga, nil
}

// GetGoogleAuthByGoogleID retrieves a row from 'google_auth' as a GoogleAuth.
// Generated from index 'google_id'.
func GetGoogleAuthByGoogleID(ctx context.Context, db Queryer, googleID string) (*GoogleAuth, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, google_id, created_at, updated_at ` +
		`FROM google_auth ` +
		`WHERE google_id = ?`

	// log and trace
	XOLog(ctx, sqlstr, googleID)
	closeSpan := startSQLSpan(ctx, "GoogleAuthByGoogleID", sqlstr, googleID)
	defer closeSpan()
	ga := GoogleAuth{
		_exists: true,
	}

	// run query
	err = db.QueryRowxContext(ctx, sqlstr, googleID).Scan(&ga.UserID, &ga.GoogleID, &ga.CreatedAt, &ga.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &ga, nil
}
