// Package infra contains the types for schema 'accountdb'.
package infra

// GENERATED BY XO. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"time"

	"github.com/go-sql-driver/mysql"
	"github.com/jmoiron/sqlx"
	"github.com/k-yomo/eitan/src/pkg/tx"
)

// PubsubEvent represents a row from 'pubsub_events'.
type PubsubEvent struct {
	ID             string         `db:"id"`              // id
	DeduplicateKey sql.NullString `db:"deduplicate_key"` // deduplicate_key
	Topic          string         `db:"topic"`           // topic
	Data           string         `db:"data"`            // data
	IsPublished    bool           `db:"is_published"`    // is_published
	PublishedAt    mysql.NullTime `db:"published_at"`    // published_at
	CreatedAt      time.Time      `db:"created_at"`      // created_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the PubsubEvent exists in the database.
func (pe *PubsubEvent) Exists() bool {
	return pe._exists
}

// GetAllPubsubEvents gets all PubsubEvents
func GetAllPubsubEvents(ctx context.Context, db Queryer) ([]*PubsubEvent, error) {
	// sql query
	const sqlstr = `SELECT ` +
		`id, deduplicate_key, topic, data, is_published, published_at, created_at ` +
		`FROM pubsub_events`

	// log and trace
	XOLog(ctx, sqlstr)
	closeSpan := startSQLSpan(ctx, "GetAllPubsubEvents", sqlstr)
	defer closeSpan()

	var pes []*PubsubEvent
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, err
	}

	for rows.Next() {
		pe := PubsubEvent{_exists: true}
		if err := rows.Scan(&pe.ID, &pe.DeduplicateKey, &pe.Topic, &pe.Data, &pe.IsPublished, &pe.PublishedAt, &pe.CreatedAt); err != nil {
			return nil, err
		}
		pes = append(pes, &pe)
	}
	return pes, nil
}

// GetPubsubEvent gets a PubsubEvent by primary key
func GetPubsubEvent(ctx context.Context, db Queryer, key string) (*PubsubEvent, error) {
	// sql query
	const sqlstr = `SELECT ` +
		`id, deduplicate_key, topic, data, is_published, published_at, created_at ` +
		`FROM pubsub_events ` +
		`WHERE id = ?`

	// log and trace
	XOLog(ctx, sqlstr, key)
	startSQLSpan(ctx, "GetPubsubEvent", sqlstr, key)
	pe := PubsubEvent{_exists: true}
	err := db.QueryRowxContext(ctx, sqlstr, key).Scan(&pe.ID, &pe.DeduplicateKey, &pe.Topic, &pe.Data, &pe.IsPublished, &pe.PublishedAt, &pe.CreatedAt)
	if err != nil {
		return nil, err
	}
	return &pe, nil
}

// GetPubsubEvents gets PubsubEvent list by primary keys
func GetPubsubEvents(ctx context.Context, db Queryer, keys []string) ([]*PubsubEvent, error) {
	// sql query
	sqlstr, args, err := sqlx.In(`SELECT `+
		`id, deduplicate_key, topic, data, is_published, published_at, created_at `+
		`FROM pubsub_events `+
		`WHERE id IN (?)`, keys)
	if err != nil {
		return nil, err
	}

	// log and trace
	XOLog(ctx, sqlstr, args)
	startSQLSpan(ctx, "GetPubsubEvents", sqlstr, args)

	rows, err := db.QueryContext(ctx, sqlstr, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// load results
	var res []*PubsubEvent
	for rows.Next() {
		pe := PubsubEvent{
			_exists: true,
		}

		// scan
		err = rows.Scan(&pe.ID, &pe.DeduplicateKey, &pe.Topic, &pe.Data, &pe.IsPublished, &pe.PublishedAt, &pe.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &pe)
	}

	return res, nil
}

// Deleted provides information if the PubsubEvent has been deleted from the database.
func (pe *PubsubEvent) Deleted() bool {
	return pe._deleted
}

// Insert inserts the PubsubEvent to the database.
func (pe *PubsubEvent) Insert(ctx context.Context, db Execer) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	// if already exist, bail
	if pe._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO pubsub_events (` +
		`id, deduplicate_key, topic, data, is_published, published_at, created_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)`

	// log and trace
	XOLog(ctx, sqlstr, pe.ID, pe.DeduplicateKey, pe.Topic, pe.Data, pe.IsPublished, pe.PublishedAt, pe.CreatedAt)
	closeSpan := startSQLSpan(ctx, "PubsubEvent_Insert", sqlstr, pe.ID, pe.DeduplicateKey, pe.Topic, pe.Data, pe.IsPublished, pe.PublishedAt, pe.CreatedAt)
	defer closeSpan()

	// run query
	_, err := db.ExecContext(ctx, sqlstr, pe.ID, pe.DeduplicateKey, pe.Topic, pe.Data, pe.IsPublished, pe.PublishedAt, pe.CreatedAt)
	if err != nil {
		return err
	}

	// set existence
	pe._exists = true

	return nil
}

// Update updates the PubsubEvent in the database.
func (pe *PubsubEvent) Update(ctx context.Context, db Execer) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	// if doesn't exist, bail
	if !pe._exists {
		return errors.New("update failed: does not exist")
	}
	// if deleted, bail
	if pe._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE pubsub_events SET ` +
		`deduplicate_key = ?, topic = ?, data = ?, is_published = ?, published_at = ?, created_at = ?` +
		` WHERE id = ?`

	// log and trace
	XOLog(ctx, sqlstr, pe.DeduplicateKey, pe.Topic, pe.Data, pe.IsPublished, pe.PublishedAt, pe.CreatedAt, pe.ID)
	closeSpan := startSQLSpan(ctx, "PubsubEvent_Update", sqlstr, pe.DeduplicateKey, pe.Topic, pe.Data, pe.IsPublished, pe.PublishedAt, pe.CreatedAt, pe.ID)
	defer closeSpan()

	// run query
	_, err := db.ExecContext(ctx, sqlstr, pe.DeduplicateKey, pe.Topic, pe.Data, pe.IsPublished, pe.PublishedAt, pe.CreatedAt, pe.ID)
	return err
}

// Delete deletes the PubsubEvent from the database.
func (pe *PubsubEvent) Delete(ctx context.Context, db Execer) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	// if doesn't exist, bail
	if !pe._exists {
		return nil
	}

	// if deleted, bail
	if pe._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM pubsub_events WHERE id = ?`

	// log and trace
	XOLog(ctx, sqlstr, pe.ID)
	closeSpan := startSQLSpan(ctx, "{ .Name }}_Delete", sqlstr, pe.ID)
	defer closeSpan()

	// run query
	_, err := db.ExecContext(ctx, sqlstr, pe.ID)
	if err != nil {
		return err
	}

	// set deleted
	pe._deleted = true

	return nil
}

// InsertOrUpdate inserts or updates the PubsubEvent to the database.
func (pe *PubsubEvent) InsertOrUpdate(ctx context.Context, db Executor) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	_, err := GetPubsubEvent(ctx, db, pe.ID)
	if err != nil && err != sql.ErrNoRows {
		return err
	}
	if err == sql.ErrNoRows {
		return pe.Insert(ctx, db)
	} else {
		pe._exists = true
		return pe.Update(ctx, db)
	}
}

// InsertOrUpdate inserts or updates the PubsubEvent to the database.
func (pe *PubsubEvent) InsertIfNotExist(ctx context.Context, db Executor) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	_, err := GetPubsubEvent(ctx, db, pe.ID)
	if err != nil {
		if err == sql.ErrNoRows {
			return pe.Insert(ctx, db)
		}
		return err
	}

	return nil
}

// PubsubEventsByIsPublished retrieves a row from 'pubsub_events' as a PubsubEvent.
// Generated from index 'is_published_idx'.
func PubsubEventsByIsPublished(ctx context.Context, db Queryer, isPublished bool) ([]*PubsubEvent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, deduplicate_key, topic, data, is_published, published_at, created_at ` +
		`FROM pubsub_events ` +
		`WHERE is_published = ?`

	// log and trace
	XOLog(ctx, sqlstr, isPublished)
	closeSpan := startSQLSpan(ctx, "PubsubEventsByIsPublished", sqlstr, isPublished)
	defer closeSpan()
	// run query
	rows, err := db.QueryContext(ctx, sqlstr, isPublished)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// load results
	var res []*PubsubEvent
	for rows.Next() {
		pe := PubsubEvent{
			_exists: true,
		}

		// scan
		err = rows.Scan(&pe.ID, &pe.DeduplicateKey, &pe.Topic, &pe.Data, &pe.IsPublished, &pe.PublishedAt, &pe.CreatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &pe)
	}

	return res, nil
}

// PubsubEventByID retrieves a row from 'pubsub_events' as a PubsubEvent.
// Generated from index 'pubsub_events_id_pkey'.
func PubsubEventByID(ctx context.Context, db Queryer, id string) (*PubsubEvent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, deduplicate_key, topic, data, is_published, published_at, created_at ` +
		`FROM pubsub_events ` +
		`WHERE id = ?`

	// log and trace
	XOLog(ctx, sqlstr, id)
	closeSpan := startSQLSpan(ctx, "PubsubEventByID", sqlstr, id)
	defer closeSpan()
	pe := PubsubEvent{
		_exists: true,
	}

	// run query
	err = db.QueryRowxContext(ctx, sqlstr, id).Scan(&pe.ID, &pe.DeduplicateKey, &pe.Topic, &pe.Data, &pe.IsPublished, &pe.PublishedAt, &pe.CreatedAt)
	if err != nil {
		return nil, err
	}

	return &pe, nil
}
