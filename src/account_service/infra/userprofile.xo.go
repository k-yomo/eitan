// Package infra contains the types for schema 'accountdb'.
package infra

// GENERATED BY XO. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"time"

	"github.com/jmoiron/sqlx"
	"github.com/k-yomo/eitan/src/pkg/tx"
)

// UserProfile represents a row from 'user_profiles'.
type UserProfile struct {
	UserID       string         `db:"user_id"`        // user_id
	Email        string         `db:"email"`          // email
	DisplayName  string         `db:"display_name"`   // display_name
	ScreenImgURL sql.NullString `db:"screen_img_url"` // screen_img_url
	CreatedAt    time.Time      `db:"created_at"`     // created_at
	UpdatedAt    time.Time      `db:"updated_at"`     // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserProfile exists in the database.
func (up *UserProfile) Exists() bool {
	return up._exists
}

// GetAllUserProfiles gets all UserProfiles
func GetAllUserProfiles(ctx context.Context, db Queryer) ([]*UserProfile, error) {
	// sql query
	const sqlstr = `SELECT ` +
		`user_id, email, display_name, screen_img_url, created_at, updated_at ` +
		`FROM user_profiles`

	// log and trace
	XOLog(ctx, sqlstr)
	closeSpan := startSQLSpan(ctx, "GetAllUserProfiles", sqlstr)
	defer closeSpan()

	var ups []*UserProfile
	rows, err := db.QueryContext(ctx, sqlstr)
	if err != nil {
		return nil, err
	}

	for rows.Next() {
		up := UserProfile{_exists: true}
		if err := rows.Scan(&up.UserID, &up.Email, &up.DisplayName, &up.ScreenImgURL, &up.CreatedAt, &up.UpdatedAt); err != nil {
			return nil, err
		}
		ups = append(ups, &up)
	}
	return ups, nil
}

// GetUserProfile gets a UserProfile by primary key
func GetUserProfile(ctx context.Context, db Queryer, key string) (*UserProfile, error) {
	// sql query
	const sqlstr = `SELECT ` +
		`user_id, email, display_name, screen_img_url, created_at, updated_at ` +
		`FROM user_profiles ` +
		`WHERE user_id = ?`

	// log and trace
	XOLog(ctx, sqlstr, key)
	startSQLSpan(ctx, "GetUserProfile", sqlstr, key)
	up := UserProfile{_exists: true}
	err := db.QueryRowxContext(ctx, sqlstr, key).Scan(&up.UserID, &up.Email, &up.DisplayName, &up.ScreenImgURL, &up.CreatedAt, &up.UpdatedAt)
	if err != nil {
		return nil, err
	}
	return &up, nil
}

// GetUserProfiles gets UserProfile list by primary keys
func GetUserProfiles(ctx context.Context, db Queryer, keys []string) ([]*UserProfile, error) {
	// sql query
	sqlstr, args, err := sqlx.In(`SELECT `+
		`user_id, email, display_name, screen_img_url, created_at, updated_at `+
		`FROM user_profiles `+
		`WHERE user_id IN (?)`, keys)
	if err != nil {
		return nil, err
	}

	// log and trace
	XOLog(ctx, sqlstr, args)
	startSQLSpan(ctx, "GetUserProfiles", sqlstr, args)

	rows, err := db.QueryContext(ctx, sqlstr, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// load results
	var res []*UserProfile
	for rows.Next() {
		up := UserProfile{
			_exists: true,
		}

		// scan
		err = rows.Scan(&up.UserID, &up.Email, &up.DisplayName, &up.ScreenImgURL, &up.CreatedAt, &up.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &up)
	}

	return res, nil
}

// Deleted provides information if the UserProfile has been deleted from the database.
func (up *UserProfile) Deleted() bool {
	return up._deleted
}

// Insert inserts the UserProfile to the database.
func (up *UserProfile) Insert(ctx context.Context, db Execer) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	// if already exist, bail
	if up._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO user_profiles (` +
		`user_id, email, display_name, screen_img_url, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// log and trace
	XOLog(ctx, sqlstr, up.UserID, up.Email, up.DisplayName, up.ScreenImgURL, up.CreatedAt, up.UpdatedAt)
	closeSpan := startSQLSpan(ctx, "UserProfile_Insert", sqlstr, up.UserID, up.Email, up.DisplayName, up.ScreenImgURL, up.CreatedAt, up.UpdatedAt)
	defer closeSpan()

	// run query
	_, err := db.ExecContext(ctx, sqlstr, up.UserID, up.Email, up.DisplayName, up.ScreenImgURL, up.CreatedAt, up.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	up._exists = true

	return nil
}

// Update updates the UserProfile in the database.
func (up *UserProfile) Update(ctx context.Context, db Execer) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	// if doesn't exist, bail
	if !up._exists {
		return errors.New("update failed: does not exist")
	}
	// if deleted, bail
	if up._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE user_profiles SET ` +
		`email = ?, display_name = ?, screen_img_url = ?, created_at = ?, updated_at = ?` +
		` WHERE user_id = ?`

	// log and trace
	XOLog(ctx, sqlstr, up.Email, up.DisplayName, up.ScreenImgURL, up.CreatedAt, up.UpdatedAt, up.UserID)
	closeSpan := startSQLSpan(ctx, "UserProfile_Update", sqlstr, up.Email, up.DisplayName, up.ScreenImgURL, up.CreatedAt, up.UpdatedAt, up.UserID)
	defer closeSpan()

	// run query
	_, err := db.ExecContext(ctx, sqlstr, up.Email, up.DisplayName, up.ScreenImgURL, up.CreatedAt, up.UpdatedAt, up.UserID)
	return err
}

// Delete deletes the UserProfile from the database.
func (up *UserProfile) Delete(ctx context.Context, db Execer) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	// if doesn't exist, bail
	if !up._exists {
		return nil
	}

	// if deleted, bail
	if up._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM user_profiles WHERE user_id = ?`

	// log and trace
	XOLog(ctx, sqlstr, up.UserID)
	closeSpan := startSQLSpan(ctx, "{ .Name }}_Delete", sqlstr, up.UserID)
	defer closeSpan()

	// run query
	_, err := db.ExecContext(ctx, sqlstr, up.UserID)
	if err != nil {
		return err
	}

	// set deleted
	up._deleted = true

	return nil
}

// InsertOrUpdate inserts or updates the UserProfile to the database.
func (up *UserProfile) InsertOrUpdate(ctx context.Context, db Executor) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	_, err := GetUserProfile(ctx, db, up.UserID)
	if err != nil && err != sql.ErrNoRows {
		return err
	}
	if err == sql.ErrNoRows {
		return up.Insert(ctx, db)
	} else {
		up._exists = true
		return up.Update(ctx, db)
	}
}

// InsertOrUpdate inserts or updates the UserProfile to the database.
func (up *UserProfile) InsertIfNotExist(ctx context.Context, db Executor) error {
	if t, ok := tx.GetTx(ctx); ok {
		db = t
	}
	_, err := GetUserProfile(ctx, db, up.UserID)
	if err != nil {
		if err == sql.ErrNoRows {
			return up.Insert(ctx, db)
		}
		return err
	}

	return nil
}

// User returns the User associated with the UserProfile's UserID (user_id).
//
// Generated from foreign key 'user_profiles_ibfk_1'.
func (up *UserProfile) User(ctx context.Context, db Executor) (*User, error) {
	return UserByID(ctx, db, up.UserID)
}

// UserProfileByEmail retrieves a row from 'user_profiles' as a UserProfile.
// Generated from index 'email'.
func UserProfileByEmail(ctx context.Context, db Queryer, email string) (*UserProfile, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, email, display_name, screen_img_url, created_at, updated_at ` +
		`FROM user_profiles ` +
		`WHERE email = ?`

	// log and trace
	XOLog(ctx, sqlstr, email)
	closeSpan := startSQLSpan(ctx, "UserProfileByEmail", sqlstr, email)
	defer closeSpan()
	up := UserProfile{
		_exists: true,
	}

	// run query
	err = db.QueryRowxContext(ctx, sqlstr, email).Scan(&up.UserID, &up.Email, &up.DisplayName, &up.ScreenImgURL, &up.CreatedAt, &up.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &up, nil
}

// UserProfilesByEmail retrieves a row from 'user_profiles' as a UserProfile.
// Generated from index 'email_idx'.
func UserProfilesByEmail(ctx context.Context, db Queryer, email string) ([]*UserProfile, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, email, display_name, screen_img_url, created_at, updated_at ` +
		`FROM user_profiles ` +
		`WHERE email = ?`

	// log and trace
	XOLog(ctx, sqlstr, email)
	closeSpan := startSQLSpan(ctx, "UserProfilesByEmail", sqlstr, email)
	defer closeSpan()
	// run query
	rows, err := db.QueryContext(ctx, sqlstr, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	// load results
	var res []*UserProfile
	for rows.Next() {
		up := UserProfile{
			_exists: true,
		}

		// scan
		err = rows.Scan(&up.UserID, &up.Email, &up.DisplayName, &up.ScreenImgURL, &up.CreatedAt, &up.UpdatedAt)
		if err != nil {
			return nil, err
		}

		res = append(res, &up)
	}

	return res, nil
}

// UserProfileByUserID retrieves a row from 'user_profiles' as a UserProfile.
// Generated from index 'user_profiles_user_id_pkey'.
func UserProfileByUserID(ctx context.Context, db Queryer, userID string) (*UserProfile, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, email, display_name, screen_img_url, created_at, updated_at ` +
		`FROM user_profiles ` +
		`WHERE user_id = ?`

	// log and trace
	XOLog(ctx, sqlstr, userID)
	closeSpan := startSQLSpan(ctx, "UserProfileByUserID", sqlstr, userID)
	defer closeSpan()
	up := UserProfile{
		_exists: true,
	}

	// run query
	err = db.QueryRowxContext(ctx, sqlstr, userID).Scan(&up.UserID, &up.Email, &up.DisplayName, &up.ScreenImgURL, &up.CreatedAt, &up.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &up, nil
}
