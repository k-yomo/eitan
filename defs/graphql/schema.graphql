scalar Time

type Query {
    node(id: ID!): Node
    nodes(ids: [ID!]!): [Node]!

    currentUserProfile: UserProfile! @hasRole(role: USER)
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

enum Role {
    USER
}

enum ErrorCode {
    UNAUTHENTICATED
    UNAUTHORIZED
    ALREADY_EXIST
    INVALID_ARGUMENT
    NOT_FOUND
    INTERNAL
}

interface Node {
    id: ID!
}

type UserProfile implements Node {
    id: ID!
    email: String!
    displayName: String!
    screenImgUrl: String
}

type UserProfilePublic implements Node {
    id: ID!
    displayName: String!
    screenImgUrl: String
}

